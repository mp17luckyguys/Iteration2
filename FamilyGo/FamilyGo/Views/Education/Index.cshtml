@Scripts.Render("~/bundles/jquery")
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Create a hover effect</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.js'></script>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            height: 100%;
            width: 75%;
            bottom: 0;
            top: 0;
            left:25%;
        }
        #wholeContiner {
            width: 100%;
            height:100%;
        }

        svg {
            height: 200px;
            width: 220px;
            border-style: solid;
            border-color: darkgray;
            border-width: 2px;
            background-color: white;
            position: absolute;
            left: 25%;
            bottom:0;
        }
        #svg1 {
            height: 210px;
            width: 120px;
            border-style: solid;
            border-color: darkgray;
            border-width: 2px;
            background-color: white;
            left: 25%;
            top: 100px;
        }
        .axis {
            font: 10px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        #filter {
            position: absolute;
            background: red;
            height: 100%;
            width: 25%;
            bottom: 0;
            top: 130px;     
        }
        .box {
            width: 50vw;
            height: 50vh;
            margin: 0 auto;
        }
        /* 清除li样式 */

        ul, li {
            list-style: none;
        }
        /* 将ul相对定位，目的是让内容的div绝对定位时相对ul定位，否则会相对body定位 */ /* ul弹性盒，目的是让li横着排，也可以将li浮动或者转行内块 */

        ul {
            position: relative;
            display: flex;
        }
        /* 将三个li宽度平分，高度60px */

        li {
            flex: 1;
            height: 60px;
        }
        /* input隐藏 */

        input {
            display: none;
        }
        /* 设置input的下一个节点label的样式 */

        input + label {
            display: block;
            width: 100%;
            height: 100%;
            background: #ccc;
            font-size: 18px;
            text-align: center;
            line-height: 60px;
            color: #333;
        }
            /* 设置div内容的基础样式 隐藏内容div*/

        input + label + div {
            display: none;
            position: absolute;
            left: 0;
            top: 60px;
        }
        /* input选中状态时候对应的label的样式 */

        input:checked + label {
            background: #333333;
            color: #fff;
        }
            /* input选中时候显示对应的div */

        input:checked + label + div {
            display: block;
        }
    </style>
</head>
<body>
    <div id="wholeContiner">
        <div class="col-lg-2 box" id="filter">   
                <ul>            
                    <li>                
                        <input type="radio" name="check" id="active1" checked><label for="active1">information</label>                
                        <div id="information">information</div>
                    </li>            
                    <li>                
                        <input type="radio" name="check" id="active2"><label for="active2">Language</label>                
                        <div id="languageFilter">Language</div>                    
                    </li>            
                    <li>                
                        <input type="radio" name="check" id="active3"><label for="active3">Country</label>                
                        <div id="countryFilter">
                            Which Country Are You Looking For<br/><select id="selectCountry" onchange="countryChange(this)"></select><br/>
                            Which Suburb Are You Looking For<br/><select id="selectSuburb"></select><br/>
                            <button id="clearButton">Clear</button>
                        </div>                    
                    </li>        
                </ul>    
        </div>
        <div class = "col-lg-10" id='map'></div>
    </div>
    <script>
        var boundaries;
        var country;
        var language;
        var languageColor = [{ 'id': 1, 'language': 'Vietnamese', 'color': '#EEC7C3' }, { 'id': 2, 'language': 'Italian', 'color': '#844773' }, { 'id': 3, 'language': 'Punjabi', 'color': '#375EB3' }, { 'id': 4, 'language': 'Greek', 'color': '#CABD27' }, { 'id': 5, 'language': 'Arabic', 'color': '#D43155' }, { 'id': 6, 'language': 'Mandarin', 'color': '#E492CE' }, { 'id': 7, 'language': 'French', 'color': '#B4766D' }, { 'id': 8, 'language': 'German', 'color': '#54E859' }, { 'id': 9, 'language': 'Cantonese', 'color': '#2937C6' }, { 'id': 10, 'language': 'Dutch', 'color': '#E7C92A' }, { 'id': 11, 'language': 'Sinhalese', 'color': '#4FD755' }, { 'id': 12, 'language': 'Tagalog', 'color': '#C45DEA' }, { 'id': 13, 'language': 'Hindi', 'color': '#FBCA22' }, { 'id': 14, 'language': 'Hebrew', 'color': '#E55A49' }, { 'id': 15, 'language': 'Russian', 'color': '#1F73F1' }, { 'id': 16, 'language': 'Turkish', 'color': '#C86AA5' }, { 'id': 17, 'language': 'Samoan', 'color': '#C93EC2' }, { 'id': 18, 'language': 'Japanese', 'color': '#7A5F3A' }, { 'id': 19, 'language': 'Dari', 'color': '#F3BB57' }, { 'id': 20, 'language': 'Albanian', 'color': '#655C79' }, { 'id': 21, 'language': 'Serbian', 'color': '#81E1E4' }, { 'id': 22, 'language': 'Macedonian', 'color': '#112318' }, { 'id': 23, 'language': 'Bosnian', 'color': '#BBF8DF' }, { 'id': 24, 'language': 'Afrikaans', 'color': '#CA3EB6' }, { 'id': 25, 'language': 'Somali', 'color': '#D79E64' }, { 'id': 26, 'language': 'Maltese', 'color': '#6CBD43' }, { 'id': 27, 'language': 'Spanish', 'color': '#2ADD8A' }, { 'id': 28, 'language': 'Maori (New Zealand)', 'color': '#8E1372' }, { 'id': 29, 'language': 'Yiddish', 'color': '#C51569' }]
        var countryColor = [{ 'id': 1, 'country': 'Vietnam', 'color': '#8D41C3' }, { 'id': 2, 'country': 'England', 'color': '#A85329' }, { 'id': 3, 'country': 'Italy', 'color': '#7A1E25' }, { 'id': 4, 'country': 'India', 'color': '#122B96' }, { 'id': 5, 'country': 'China', 'color': '#D5F4B1' }, { 'id': 6, 'country': 'Greece', 'color': '#43ADFE' }, { 'id': 7, 'country': 'Iraq', 'color': '#438344' }, { 'id': 8, 'country': 'Philippines', 'color': '#757ED9' }, { 'id': 9, 'country': 'Poland', 'color': '#39517C' }, { 'id': 10, 'country': 'South Africa', 'color': '#E14578' }, { 'id': 11, 'country': 'New Zealand', 'color': '#EBEF8B' }, { 'id': 12, 'country': 'Turkey', 'color': '#8AD886' }, { 'id': 13, 'country': 'Sri Lanka', 'color': '#7C9116' }, { 'id': 14, 'country': 'Afghanistan', 'color': '#228E8C' }, { 'id': 15, 'country': 'Somalia', 'color': '#A31DDD' }, { 'id': 16, 'country': 'Malta', 'color': '#F89614' }, { 'id': 17, 'country': 'Malaysia', 'color': '#6F5ABE' }]

        $.ajax({
            url: "/Education/GetJsonFromFile",
            type: "GET",//请求方式为get
            dataType: "json", //返回数据格式为json
            data: { path: "~/json/new.geojson" },
            async: false,//是否同步
            success: function (data) {//请求成功完成后要执行的方法
                boundaries = data;
            },
            error: function () {
                console.log("error");
            }
        })
        mapboxgl.accessToken = 'pk.eyJ1IjoiemVrdW5kaSIsImEiOiJjamZ3OTRsbHQ0aWRzMzBudms4dGxoZmZnIn0.0yzmMvKJeh6Md9wQ4_Ozlw';
        var hoveredStateId = null;
        var margin = { top: 100, right: 20, bottom: 70, left: 400 },
            width = 600 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [144.964194, -37.824898],
            zoom: 10
        });
        var svg;
        var svgContainer;
        var canvas = map.getCanvasContainer();
        country();
        function country() {
            map.on('load', function () {
                map.addSource("states", {
                    "type": "geojson",
                    "data": boundaries
                });
                svg1 = d3.select("body").append("svg")
                    .attr("id", "svg1")
                    .attr("transform", "translate(" + 10 + "," + 10 + ")");
                legendArea = svg1.append("g")
                    .attr("transform", "translate(0,20)");

                var legend = legendArea.selectAll("g")
                    .data(countryColor)
                    .enter()
                    .append("g")
                    .attr("transform", function (d, i) {
                        return "translate(" + 10 + "," + 10 * i + ")";
                    });

                legend.append("rect")
                    .attr("width", 8)
                    .attr("height", 8)
                    .style("fill", function (d, i) {
                        return d['color']
                    });

                legend.append("text")
                    .attr("x", 24)
                    .attr("y", 9)
                    .style("fill", function (d, i) {
                        return d['color']
                    })
                    .attr("dy", ".05em")
                    .attr("font-size", "10px")
                    .text(function (d, i) {
                        return d['country'];
                    });

                map.addLayer({
                    "id": "state-fills",
                    "type": "fill",
                    "source": "states",
                    "layout": {},
                    'paint': {
                        'fill-color': {
                            "property": "main_country_id", "stops": [[0, 'white'],
                            [1, '#8D41C3'],
                            [2, '#A85329'],
                            [3, '#7A1E25'],
                            [4, '#122B96'],
                            [5, '#D5F4B1'],
                            [6, '#43ADFE'],
                            [7, '#438344'],
                            [8, '#757ED9'],
                            [9, '#39517C'],
                            [10, '#E14578'],
                            [11, '#EBEF8B'],
                            [12, '#8AD886'],
                            [13, '#7C9116'],
                            [14, '#228E8C'],
                            [15, '#A31DDD'],
                            [16, '#F89614'],
                            [17, '#6F5ABE']]
                        }, 'fill-opacity':
                            ["case",
                                ["boolean", ["feature-state", "hover"], false], 1, 0.5
                            ]
                    },
                });

                map.addLayer({
                    "id": "state-borders",
                    "type": "line",
                    "source": "states",
                    "layout": {},
                    "paint": {
                        "line-color": "#627BC1",
                        "line-width": 1
                    }
                });
                var tooltip = d3.select("body")
                    .append("div")
                    .style("border-style", "solid")
                    .style("border-width", "1px")
                    .style("background-color", "lightgray")
                    .style("position", "absolute")
                    .style("opacity", 0.8)
                    .style("visibility", "visible");
                var Ddata;
                $.ajax({
                    url: "/Education/GetJsonFromFile",
                    type: "GET",//请求方式为get
                    dataType: "json", //返回数据格式为json
                    data: { path: "~/json/Country.json" },
                    async: false,//是否同步
                    success: function (data) {//请求成功完成后要执行的方法
                        Ddata = data;
                    },
                    error: function () {
                        console.log("error");
                    }
                })

                // When the user moves their mouse over the state-fill layer, we'll update the
                // feature state for the feature under the mouse.
                map.on("mousemove", "state-fills", function (thisElement) {
                    if (thisElement.features.length > 0) {
                        if (hoveredStateId) {
                            map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                        }
                        hoveredStateId = thisElement.features[0].id;
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: true });
                    }
                    tooltip.style("visibility", "visible").text(thisElement.features[0].properties.vic_loca_2);
                    tooltip.style("top", (thisElement.point.y + 20) + "px").style("left", (thisElement.point.x + 310) + "px");
                    clicked = thisElement.features[0].properties.vic_loca_2;
                    Ddata.forEach(function (e) {
                        if (e["Suburb"].toUpperCase() == clicked) {
                            barchartForCountry(e);
                        }
                    })
                    });
                // When the mouse leaves the state-fill layer, update the feature state of the
                // previously hovered feature.
                map.on("mouseleave", "state-fills", function () {
                    if (hoveredStateId) {
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                    }
                    hoveredStateId = null;
                    tooltip.style("visibility", "hidden");
                });

                map.on("click", "state-fills", function (thisElement) {

                });
            });
        }
        function language() {
            map.on('load', function () {
                map.addSource("states", {
                    "type": "geojson",
                    "data": boundaries
                });

                svg1 = d3.select("body").append("svg")
                    .attr("id", "svg1")
                    .attr("transform", "translate(" + 10 + "," + 10 + ")");
                legendArea = svg1.append("g")
                    .attr("transform", "translate(0,20)");

                var legend = legendArea.selectAll("g")
                    .data(languageColor)
                    .enter()
                    .append("g")
                    .attr("transform", function (d, i) {
                        return "translate(" + 10 + "," + 10 * i + ")";
                    });

                legend.append("rect")
                    .attr("width", 8)
                    .attr("height", 8)
                    .style("fill", function (d, i) {
                        return d['color']
                    });

                legend.append("text")
                    .attr("x", 24)
                    .attr("y", 9)
                    .style("fill", function (d, i) {
                        return d['color']
                    })
                    .attr("dy", ".05em")
                    .attr("font-size", "10px")
                    .text(function (d, i) {
                        return d['language'];
                    });
                // The feature-state dependent fill-opacity expression will render the hover effect
                // when a feature's hover state is set to true.
                map.addLayer({
                    "id": "state-fills",
                    "type": "fill",
                    "source": "states",
                    "layout": {},
                    'paint': {
                        'fill-color': {
                            "property": "main_language_id", "stops": [[0, 'white'],
                            [1, '#EEC7C3'],
                            [2, '#844773'],
                            [3, '#375EB3'],
                            [4, '#CABD27'],
                            [5, '#D43155'],
                            [6, '#E492CE'],
                            [7, '#B4766D'],
                            [8, '#54E859'],
                            [9, '#2937C6'],
                            [10, '#E7C92A'],
                            [11, '#4FD755'],
                            [12, '#C45DEA'],
                            [13, '#FBCA22'],
                            [14, '#E55A49'],
                            [15, '#1F73F1'],
                            [16, '#C86AA5'],
                            [17, '#C93EC2'],
                            [18, '#7A5F3A'],
                            [19, '#F3BB57'],
                            [20, '#655C79'],
                            [21, '#81E1E4'],
                            [22, '#112318'],
                            [23, '#BBF8DF'],
                            [24, '#CA3EB6'],
                            [25, '#D79E64'],
                            [26, '#6CBD43'],
                            [27, '#2ADD8A'],
                            [28, '#8E1372'],
                            [29, '#C51569']]
                        }, 'fill-opacity':
                            ["case",
                                ["boolean", ["feature-state", "hover"], false], 1, 0.5
                            ]
                    },
                });

                map.addLayer({
                    "id": "state-borders",
                    "type": "line",
                    "source": "states",
                    "layout": {},
                    "paint": {
                        "line-color": "#627BC1",
                        "line-width": 1
                    }
                });
                var tooltip = d3.select("body")
                    .append("div")
                    .style("border-style", "solid")
                    .style("border-width", "1px")
                    .style("background-color", "lightgray")
                    .style("position", "absolute")
                    .style("opacity", 0.8)
                    .style("visibility", "visible");
                var Ddata;
                $.ajax({
                    url: "/Education/GetJsonFromFile",
                    type: "GET",//请求方式为get
                    dataType: "json", //返回数据格式为json
                    data: { path: "~/json/Language.json" },
                    async: false,//是否同步
                    success: function (data) {//请求成功完成后要执行的方法
                        Ddata = data;
                    },
                    error: function () {
                        console.log("error");
                    }
                })

                // When the user moves their mouse over the state-fill layer, we'll update the
                // feature state for the feature under the mouse.
                map.on("mousemove", "state-fills", function (thisElement) {
                    if (thisElement.features.length > 0) {
                        if (hoveredStateId) {
                            map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                        }
                        hoveredStateId = thisElement.features[0].id;
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: true });
                    }
                    tooltip.style("visibility", "visible").text(thisElement.features[0].properties.vic_loca_2);
                    tooltip.style("top", (thisElement.point.y - 10) + "px").style("left", (thisElement.point.x + 10) + "px");

                    clicked = thisElement.features[0].properties.vic_loca_2;
                    Ddata.forEach(function (e) {
                        if (e["Suburb"].toUpperCase() == clicked) {
                            barchartForLanguage(e);
                        }
                    })
                });
                // When the mouse leaves the state-fill layer, update the feature state of the
                // previously hovered feature.
                map.on("mouseleave", "state-fills", function () {
                    if (hoveredStateId) {
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                    }
                    hoveredStateId = null;
                    tooltip.style("visibility", "hidden");
                });

                map.on("click", "state-fills", function (thisElement) {

                });
            });
        }
        function barchartForCountry(e) {
            d3.select("#svg").selectAll("g").remove();

            var x = d3.scale.ordinal().rangeRoundBands([0, width], .5);

            var y = d3.scale.linear().range([height, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(10);
            svg = d3.select("body").append("svg")
                .attr("id", "svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + 30 + "," + 10 + ")");
            var tooltip1 = d3.select("body")
                .append("div")
                .style("border-style", "solid")
                .style("border-width", "1px")
                .style("background-color", "lightgray")
                .style("position", "absolute")
                .style("opacity", 0.8)
                .style("visibility", "visible");

            data = [{ "CountryName": e["Top country of birth"], "value": e["Top country of birth, %"] },
            { "CountryName": e["2nd top country of birth"], "value": e["2nd top country of birth, %"] },
            { "CountryName": e["3rd top country of birth"], "value": e["3rd top country of birth, %"] },
            { "CountryName": e["4th top country of birth"], "value": e["4th top country of birth, %"] },
            { "CountryName": e["5th top country of birth"], "value": e["5th top country of birth, %"] },];
            data.forEach(function (d) {
                d.CountryName = d.CountryName;
                d.value = +d.value;
            });
            //console.log(data);
            x.domain(data.map(function (d) { return d.CountryName; }));
            y.domain([0, d3.max(data, function (d) { return d.value; })]);

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", "-.55em")
                .attr("transform", "rotate(-90)");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "0.32em")
                .style("text-anchor", "end")
                .text("Value ($)");

            svg.selectAll("bar")
                .data(data)
                .enter().append("rect")
                .style("fill", "steelblue")
                .attr("x", function (d) { return x(d.CountryName); })
                .attr("width", x.rangeBand())
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(d.value); });

            svg.selectAll("rect")
                .on("mouseover", function (thisElement, index) {
                    tooltip1.style("visibility", "visible").text(thisElement["value"]);
                    d3.selectAll("rect").attr("opacity", 0.7); // grey out all circles
                    d3.select(this).attr("opacity", 1);
                })
                .on("mousemove", function () { tooltip1.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseout", function (thisElement, index) {
                    tooltip1.style("visibility", "hidden");
                    svg.selectAll("rect") // restore all circles to normal mode
                        .attr("opacity", 1);
                });
        }
        function barchartForLanguage(e) {
            d3.select("#svg").selectAll("g").remove();
            
            svg = d3.select("body").append("svg")
                .attr("id", "svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + 30 + "," + 10 + ")");
            var tooltip1 = d3.select("body")
                .append("div")
                .style("border-style", "solid")
                .style("border-width", "1px")
                .style("background-color", "lightgray")
                .style("position", "absolute")
                .style("opacity", 0.8)
                .style("visibility", "visible");
            var x = d3.scale.ordinal().rangeRoundBands([0, width], .5);

            var y = d3.scale.linear().range([height, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(10);

            data = [{ "LanguageName": e["Top language spoken"], "value": e["Top language spoken, %"] },
            { "LanguageName": e["2nd top language spoken"], "value": e["2nd top language spoken, %"] },
            { "LanguageName": e["3rd top language spoken"], "value": e["3rd top language spoken, %"] },
            { "LanguageName": e["4th top language spoken"], "value": e["4th top language spoken, %"] },
            { "LanguageName": e["5th top language spoken"], "value": e["5th top language spoken, %"] },];
            data.forEach(function (d) {
                d.LanguageName = d.LanguageName;
                d.value = +d.value;
            });
            x.domain(data.map(function (d) { return d.LanguageName; }));
            y.domain([0, d3.max(data, function (d) { return d.value; })]);
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", "-.55em")
                .attr("transform", "rotate(-90)");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "0.32em")
                .style("text-anchor", "end")
                .text("percentage of language %");

            svg.selectAll("bar")
                .data(data)
                .enter().append("rect")
                .style("fill", "steelblue")
                .attr("x", function (d) { return x(d.LanguageName); })
                .attr("width", x.rangeBand())
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(d.value); });

            svg.selectAll("rect")
                .on("mouseover", function (thisElement, index) {
                    tooltip1.style("visibility", "visible").text(thisElement["value"]);
                    d3.selectAll("rect").attr("opacity", 0.7); // grey out all circles
                    d3.select(this).attr("opacity", 1);
                })
                .on("mousemove", function () { tooltip1.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px"); })
                .on("mouseleave", function (thisElement, index) {
                    tooltip1.style("visibility", "hidden");
                    svg.selectAll("rect") // restore all circles to normal mode
                        .attr("opacity", 1);
                });
        }

    </script>
    <script>
        var selectCountry = document.getElementById("selectCountry");
        var selectSuburb = document.getElementById("selectSuburb");
        var countrySelected = 0;
        var suburbs = [];
        selectCountry.options.add(new Option("select country",0))
        for (var i = 0; i < countryColor.length; i++) {
            selectCountry.options.add(new Option(countryColor[i]["country"], countryColor[i]["id"]));
        } 

        function countryChange(obj)
        {
            var m = parseInt(obj.options[obj.selectedIndex].value);
            countrySelected = m;
            if (m != 0) {
                map.setPaintProperty("state-fills", 'fill-color', {
                    "property": "main_country_id",
                        "stops": [[m - 1, 'white'], [m, 'gray'], [m + 1, 'white']]
                });
            }
            loadSuburb();
        }
        loadSuburb();
        function loadSuburb() {
            selectSuburb.options.length = 0;
            suburbs = [];
            for (var i = 0; i < boundaries["features"].length; i++) {
                if (countrySelected == 0) { suburbs.push(boundaries["features"][i]); }
                else {
                    if (countrySelected == boundaries["features"][i]["main_country_id"]) { suburbs.push(boundaries["features"][i]); }
                }

            }
            selectSuburb.options.add(new Option("select suburb", 0))
            for (var i = 0; i < suburbs.length; i++) {
                selectSuburb.options.add(new Option(suburbs[i]["properties"]["vic_loca_2"].toLowerCase(), suburbs[i]["id"]));
            }
        }
 
    </script>
</body >
</html >
